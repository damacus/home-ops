---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 75.16.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: prometheus-operator-crds
      namespace: monitoring
    - name: openebs
      namespace: openebs-system
  values:
    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      ingress:
        enabled: true
        annotations:
          external-dns.alpha.kubernetes.io/target: "192.168.1.224"
        ingressClassName: internal
        hosts: ["alertmanager.ironstone.casa"]
        pathType: Prefix
      alertmanagerSpec:
        useExistingSecret: true
        configSecret: alertmanager-secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: openebs-hostpath
              resources:
                requests:
                  storage: 1Gi
    kubeApiServer:
      serviceMonitor:
        selector:
          k8s-app: kube-apiserver
        metricRelabelings:
          - action: drop
            sourceLabels: [__name__, verb, resource]
            regex: apiserver_request_duration_seconds_bucket;(get|list|watch);(pods|nodes|services|endpoints|ingresses)
          - action: drop
            sourceLabels: [__name__, verb, resource]
            regex: etcd_request_duration_seconds_bucket;(get|list|watch);(pods|nodes|services|endpoints|ingresses)
    kubeScheduler:
      service:
        selector:
          k8s-app: kube-scheduler
    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          k8s-app: kube-controller-manager
      serviceMonitor:
        enabled: true
        metricRelabelings:
          - action: drop
            sourceLabels: [__name__, verb, resource]
            regex: rest_client_request_duration_seconds_bucket;(get|list|watch);(pods|nodes|services|endpoints|ingresses)
    kubeEtcd:
      <<: *kubeControllerManager # etcd runs on control plane nodes
    kubeProxy:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        annotations:
          external-dns.alpha.kubernetes.io/target: "192.168.1.224"
        ingressClassName: internal
        hosts: ["prometheus.ironstone.casa"]
        pathType: Prefix
      prometheusSpec:
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 14d
        retentionSize: 70GB
        resources:
          requests:
            cpu: 500m
            memory: 2000Mi
          limits:
            cpu: 1000m
            memory: 3000Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: openebs-hostpath
              resources:
                requests:
                  storage: 50Gi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
