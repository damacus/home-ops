---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.0.4/charts/other/app-template/values.schema.json
controllers:
  home-assistant:
    annotations:
      reloader.stakater.com/auto: "true"
    type: statefulset
    containers:
      app:
        image:
          repository: ghcr.io/onedr0p/home-assistant
          pullPolicy: IfNotPresent
          # renovate: datasource=docker depName=homeassistant/home-assistant
          tag: 2024.3.3

        env:
          TZ: ${TIMEZONE}
          HASS_HTTP_TRUSTED_PROXY_1: 192.168.0.0/16
          HASS_HTTP_TRUSTED_PROXY_2: "${CLUSTER_CIDR}"

        envFrom:
          - secretRef:
              name: home-assistant-secret

        probes:
          liveness:
            enabled: false
          readiness:
            enabled: false
          startup:
            enabled: false

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }

        resources:
          requests:
            cpu: 250m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi

    pod:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        runAsNonRoot: true
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch

service:
  app:
    controller: home-assistant
    # type: LoadBalancer
    # loadBalancerIP: "${HASS_ADDR}"
    ports:
      http:
        port: 8123

ingress:
  app:
    enabled: true
    className: external
    annotations:
      external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
    hosts:
      - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
        paths:
          - path: /
            service:
              identifier: app
              port: http
    tls:
      - hosts:
          - *host

  internal:
    enabled: true
    className: internal
    annotations:
      external-dns.alpha.kubernetes.io/target: ${NGINX_INTERNAL_ADDR}
    hosts:
      - host: &internal-host "hass.home.arpa"
        paths:
          - path: /
            service:
              identifier: app
              port: http
    tls:
      - hosts:
          - *internal-host

persistence:
  config:
    existingClaim: home-assistant-config
    globalMounts:
      - path: /config

  logs:
    type: emptyDir
    globalMounts:
      - path: /config/logs

  tts:
    type: emptyDir
    globalMounts:
      - path: /config/tts

  tmp:
    type: emptyDir

  backup:
    type: nfs
    server: ${SECRET_SYNOLOGY_IP}
    path: ${SECRET_NFS_DIRECTORY}/backups-hass
    globalMounts:
      - path: /config/backups
